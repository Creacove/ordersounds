
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uoezlwkxhbzajdivrlby.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVvZXpsd2t4aGJ6YWpkaXZybGJ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3Mzg5MzAsImV4cCI6MjA1ODMxNDkzMH0.TwIkGiLNiuxTdzbAxv6zBgbK1zIeNkhZ6qeX6OmhWOk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create supabase client with proper settings
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
  },
  global: {
    // Set fetch timeout to 15 seconds to prevent indefinite hanging requests
    fetch: (url, options) => {
      const controller = new AbortController();
      const { signal } = controller;
      
      // Set a timeout of 15 seconds
      const timeoutId = setTimeout(() => {
        controller.abort();
        console.log(`Request to ${url} timed out after 15s`);
      }, 15000);
      
      return fetch(url, { ...options, signal }).finally(() => {
        clearTimeout(timeoutId);
      });
    },
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Export utility functions for handling supabase connectivity issues
export const healthCheck = async () => {
  try {
    const { data, error } = await supabase.from('beats').select('id').limit(1).maybeSingle();
    return { ok: !error, data, error };
  } catch (error) {
    console.error('Supabase connectivity error:', error);
    return { ok: false, error };
  }
};
