
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uoezlwkxhbzajdivrlby.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVvZXpsd2t4aGJ6YWpkaXZybGJ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3Mzg5MzAsImV4cCI6MjA1ODMxNDkzMH0.TwIkGiLNiuxTdzbAxv6zBgbK1zIeNkhZ6qeX6OmhWOk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    detectSessionInUrl: true, // Ensure OAuth redirect handling works
    flowType: 'pkce', // Use PKCE flow for more secure OAuth
    debug: process.env.NODE_ENV === 'development' // Enable debug in development
  },
  global: {
    headers: {
      'Content-Type': 'application/json'
    },
    fetch: (input: RequestInfo | URL, init?: RequestInit) => {
      const fetchOptions = {
        ...init,
        headers: {
          ...init?.headers,
          'Cache-Control': 'no-cache'  // Prevent caching by CDN
        }
      };
      
      // Add timeout to prevent hanging requests
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
      
      const fetchPromise = fetch(input, {
        ...fetchOptions,
        signal: controller.signal
      }).then(response => {
        clearTimeout(timeoutId);
        return response;
      }).catch(err => {
        clearTimeout(timeoutId);
        console.error('Supabase fetch error:', err);
        throw err;
      });
      
      return fetchPromise;
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 2 // Limit realtime events to reduce connection pressure
    }
  }
});
