
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables if available, otherwise fallback to hardcoded values
// NOTE: The hardcoded values are kept here temporarily for backward compatibility
// In production, you should set these environment variables and remove the fallbacks
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://uoezlwkxhbzajdivrlby.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVvZXpsd2t4aGJ6YWpkaXZybGJ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3Mzg5MzAsImV4cCI6MjA1ODMxNDkzMH0.TwIkGiLNiuxTdzbAxv6zBgbK1zIeNkhZ6qeX6OmhWOk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
        'apikey': SUPABASE_PUBLISHABLE_KEY
      },
      fetch: (url, options = {}) => {
        // Enhanced fetch with proper timeout and retry logic
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout

        // Properly extract and handle headers
        const existingHeaders = options.headers || {};
        
        const fetchOptions: RequestInit = {
          ...options,
          signal: controller.signal,
          // Add keep-alive headers to maintain connections
          headers: {
            // Properly handle existing headers from options
            ...(typeof existingHeaders === 'object' && existingHeaders !== null ? existingHeaders : {}),
            'Connection': 'keep-alive',
            'Keep-Alive': 'timeout=5, max=1000',
          },
        };

        return fetch(url, fetchOptions)
          .finally(() => clearTimeout(timeoutId))
          .catch(error => {
            if (error.name === 'AbortError') {
              throw new Error('Request timeout - please try again');
            }
            throw error;
          });
      }
    },
    db: {
      schema: 'public'
    }
  }
);
